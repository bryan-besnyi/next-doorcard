generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  username       String?         @unique
  password       String
  role           UserRole        @default(FACULTY)
  college        College?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  doorcards      Doorcard[]
  doorcardDrafts DoorcardDraft[]

  @@index([email])
  @@index([username])
  @@index([college])
  @@index([createdAt])
}

model Doorcard {
  id           String              @id @default(cuid())
  name         String
  doorcardName String
  officeNumber String
  startDate    DateTime?
  endDate      DateTime?
  term         String
  year         String
  college      College?
  isActive     Boolean             @default(true)
  isPublic     Boolean             @default(true)
  slug         String?             @unique
  userId       String
  termId       String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  appointments Appointment[]
  termRelation Term?               @relation(fields: [termId], references: [id])
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics    DoorcardAnalytics[]
  metrics      DoorcardMetrics?

  @@index([userId])
  @@index([term, year])
  @@index([college])
  @@index([isActive])
  @@index([isPublic])
  @@index([slug])
  @@index([createdAt])
  @@index([officeNumber])
  @@index([termId])
}

model Appointment {
  id         String              @id @default(cuid())
  name       String
  startTime  String
  endTime    String
  dayOfWeek  DayOfWeek
  category   AppointmentCategory @default(OFFICE_HOURS)
  location   String?
  doorcardId String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  doorcard   Doorcard            @relation(fields: [doorcardId], references: [id], onDelete: Cascade)

  @@index([doorcardId])
  @@index([dayOfWeek])
  @@index([category])
  @@index([startTime])
}

model DoorcardDraft {
  id                 String   @id @default(cuid())
  userId             String
  originalDoorcardId String?
  data               Json
  lastUpdated        DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
  @@index([userId])
  @@index([originalDoorcardId])
  @@index([lastUpdated])
}

model DoorcardAnalytics {
  id         String         @id @default(cuid())
  doorcardId String
  eventType  AnalyticsEvent
  ipAddress  String?
  userAgent  String?
  referrer   String?
  sessionId  String?
  metadata   Json?
  createdAt  DateTime       @default(now())
  doorcard   Doorcard       @relation(fields: [doorcardId], references: [id], onDelete: Cascade)

  @@index([doorcardId, eventType])
  @@index([doorcardId, createdAt])
  @@index([eventType, createdAt])
  @@index([sessionId])
  @@index([createdAt])
}

model DoorcardMetrics {
  id            String    @id @default(cuid())
  doorcardId    String    @unique
  totalViews    Int       @default(0)
  uniqueViews   Int       @default(0)
  totalPrints   Int       @default(0)
  totalShares   Int       @default(0)
  lastViewedAt  DateTime?
  lastPrintedAt DateTime?
  updatedAt     DateTime  @updatedAt
  doorcard      Doorcard  @relation(fields: [doorcardId], references: [id], onDelete: Cascade)

  @@index([totalViews])
  @@index([uniqueViews])
  @@index([lastViewedAt])
}

model Term {
  id          String     @id @default(cuid())
  name        String     @unique
  year        String
  season      String
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean    @default(false)
  isArchived  Boolean    @default(false)
  isUpcoming  Boolean    @default(false)
  archiveDate DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  doorcards   Doorcard[]

  @@index([year])
  @@index([season])
  @@index([isActive])
  @@index([isArchived])
  @@index([startDate])
  @@index([endDate])
}

enum College {
  SKYLINE
  CSM
  CANADA
}

enum UserRole {
  FACULTY
  ADMIN
  STAFF
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AppointmentCategory {
  OFFICE_HOURS
  IN_CLASS
  LECTURE
  LAB
  HOURS_BY_ARRANGEMENT
  REFERENCE
}

enum AnalyticsEvent {
  VIEW
  PRINT_PREVIEW
  PRINT_DOWNLOAD
  EDIT_STARTED
  SHARE
  SEARCH_RESULT
}
